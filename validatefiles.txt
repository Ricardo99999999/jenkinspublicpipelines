pipeline {
  agent any
  stages {
  
    stage('Checking versions') {
      steps {
          script{
			//Save all the respond
            def nodeOutput = bat(script: 'node -v', returnStdout: true).trim()
            def npmOutput  = bat(script: 'npm -v', returnStdout: true).trim()
            
            //Use only the last line for printing node and npm versions
            def nodeVersion = nodeOutput.readLines().last()
            def npmVersion  = npmOutput.readLines().last()
			
            echo "La version de Node es: ${nodeVersion}"
            echo "La version de NPM es: ${npmVersion}"
            //The same as
            //bat 'node -v'
            //bat 'npm -v'
          }
      }
    }
	
    stage('Cloning GitHub repository') {
      steps {
         // Clone GitHub repository
        git branch: 'master', url: 'https://github.com/Ricardo99999999/developmentproofs'
      }
    }
	
	stage('Install dependencies') {
      steps {
        bat 'npm install'
      }
    }
	
	stage('Run validate') {
      steps {
		script{
			//def status = bat(script: 'npm run validate', returnStatus: true) //bat 'npm run validate' , es lo mismo pero inyectado en una variable , recogiendo su estado de salida
			//echo "El valor de la variable status es: ${status}"
			//if (status != 0) {
            // Esto NO rompe el build, lo deja en amarillo (warning). Logica para hacer que no sea bloqueante, si se quiere que sea bloqueante, se eliminar√≠a el IF
            //unstable("Fallo en la validacion, pero marcamos UNSTABLE en lugar de FAIL")
			node ./index.js
          }
		}		

      }
    }
  }
}
