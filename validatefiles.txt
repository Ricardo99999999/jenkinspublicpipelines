pipeline {
  agent any
  stages {
  
    stage('Checking versions and preconditions') {
      steps {
          script{
			//Eliminar en caso de que se quede algo en caché, ya que me estaba recogiendo una versión de npm que no era la correcta
			bat 'npm cache clean --force'

			// Antes de limpiar
			echo "Estos son los archivos los cuales tiene internamente Jenkins"
			bat 'dir /s /b'

			//Eliminar toda la información del directorio para evitar problemas con las versiones
			deleteDir()

			// Después de limpiar
			echo "Estos son los archivos que tiene después de la limpieza"
			bat 'dir /s /b'

			//Save all the respond
            def nodeOutput = bat(script: 'node -v', returnStdout: true).trim()
            def npmOutput  = bat(script: 'npm -v', returnStdout: true).trim()
            
            //Use only the last line for printing node and npm versions
            def nodeVersion = nodeOutput.readLines().last()
            def npmVersion  = npmOutput.readLines().last()
			
            echo "La version de Node es: ${nodeVersion}"
            echo "La version de NPM es: ${npmVersion}"
            //The same as
            //bat 'node -v'
            //bat 'npm -v'


          }
      }
    }
	
    stage('Cloning GitHub repository') {
      steps {
         // Clone GitHub repository
        //git branch: 'master', url: 'https://github.com/Ricardo99999999/developmentproofs.git'
		git branch: 'master', url: '${repositorio_Git}'
      }
    }
	
	stage('Install dependencies') {
      steps {
        bat 'npm install'
		bat 'npm list validatefiles'
		//bat 'npm install validatefiles@latest'
		//bat 'npm list validatefiles'
      }
    }
	
	stage('Run validate') {
      steps {
		script{
			//def status = bat(script: 'npm run validate', returnStatus: true) //bat 'npm run validate' , es lo mismo pero inyectado en una variable , recogiendo su estado de salida
			def status = bat(script: 'node ./index.js', returnStatus: true) //bat 'node ./index.js' , es lo mismo pero inyectado en una variable , recogiendo su estado de salida
			echo "El valor de la variable status es: ${status}"
			if (status != 0) {
            // Esto NO rompe el build, lo deja en amarillo (warning). Logica para hacer que no sea bloqueante, si se quiere que sea bloqueante, se eliminaría el IF
            unstable("Fallo en la validacion, pero marcamos UNSTABLE en lugar de FAIL")
			deleteDir() //Nos aseguramos que se limpie el agente para evitar problemas con las siguientes ejecuciones
          }
		}		

      }
    }
  }
}
